#!/usr/bin/env sh

# Setup.
VERSION="0.3.0"

version() {
	printf "git-fire version %s\n" "$VERSION"

	git --version
}

# Helpers.
current_branch() {
	echo "$(git rev-parse --abbrev-ref HEAD)"
}

current_epoch() {
	date +%s
}

user_email() {
	git config user.email
}

new_branch() {
	echo "fire-$(user_email)/$(current_branch)-$1"
}

new_stash_branch() {
	echo "fire-$(user_email)/stashes/$1"
}

fire() {
	local initial_branch="$(current_branch)"
	local epoch="$(current_epoch)"
	local fire_branch="$(new_branch ${epoch})"

	git add -A

	if [ -z "$1" ]; then
		message="Fire! Branch $(current_branch)."
	else
		message="$*"
	fi

	git commit -m "$message" --no-verify

	for remote in $(git remote); do

		git push "${remote}" "HEAD:${fire_branch}" || true

		if [[ $(git stash list) != '' ]]; then
	  		for sha in $(git rev-list -g stash); do
		  		git push "${remote}" "${sha}:refs/heads/$(new_stash_branch $sha)"
	  		done
		fi
	done

	printf "\n\nWork pushed to ${fire_branch}"
	printf "\nRemove the branches with: $0 --clean ${epoch}\n"
	git reset --soft HEAD~1
}

clean_fire() {

	local fire_branch="$(new_branch $1)"

	for remote in $(git remote); do
		git push "${remote}" ":${fire_branch}" || true
	done
}

display_help() {
	cat <<-EOF

  usage:
    git fire [options] [COMMAND] [args]

  commands:
    git fire                        Add, commit, and push to remote in case of a fire
    git fire <message>              Execute git fire with <message> for commit message

  options:
    -V, --version                   Output current version of git-fire
	-c, --clean <epoch>             Delete the branch saved with this email and <epoch> timestamp
    -h, --help                      Display this help information

EOF
	exit 0
}


case $1 in
	-V|--version) version; exit 0 ;;
	-c|--clean) clean_fire $2; exit 0 ;;
	-h|--help) display_help; exit 0 ;;
esac

fire "$@"
